// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "github.com/pthum/stripcontrol-golang/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// EventHandler is an autogenerated mock type for the EventHandler type
type EventHandler struct {
	mock.Mock
}

type EventHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *EventHandler) EXPECT() *EventHandler_Expecter {
	return &EventHandler_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *EventHandler) Close() {
	_m.Called()
}

// EventHandler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type EventHandler_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *EventHandler_Expecter) Close() *EventHandler_Close_Call {
	return &EventHandler_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *EventHandler_Close_Call) Run(run func()) *EventHandler_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventHandler_Close_Call) Return() *EventHandler_Close_Call {
	_c.Call.Return()
	return _c
}

// PublishProfileEvent provides a mock function with given fields: event
func (_m *EventHandler) PublishProfileEvent(event *model.ProfileEvent) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ProfileEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventHandler_PublishProfileEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishProfileEvent'
type EventHandler_PublishProfileEvent_Call struct {
	*mock.Call
}

// PublishProfileEvent is a helper method to define mock.On call
//   - event *model.ProfileEvent
func (_e *EventHandler_Expecter) PublishProfileEvent(event interface{}) *EventHandler_PublishProfileEvent_Call {
	return &EventHandler_PublishProfileEvent_Call{Call: _e.mock.On("PublishProfileEvent", event)}
}

func (_c *EventHandler_PublishProfileEvent_Call) Run(run func(event *model.ProfileEvent)) *EventHandler_PublishProfileEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.ProfileEvent))
	})
	return _c
}

func (_c *EventHandler_PublishProfileEvent_Call) Return(_a0 error) *EventHandler_PublishProfileEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

// PublishStripEvent provides a mock function with given fields: event
func (_m *EventHandler) PublishStripEvent(event *model.StripEvent) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.StripEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventHandler_PublishStripEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishStripEvent'
type EventHandler_PublishStripEvent_Call struct {
	*mock.Call
}

// PublishStripEvent is a helper method to define mock.On call
//   - event *model.StripEvent
func (_e *EventHandler_Expecter) PublishStripEvent(event interface{}) *EventHandler_PublishStripEvent_Call {
	return &EventHandler_PublishStripEvent_Call{Call: _e.mock.On("PublishStripEvent", event)}
}

func (_c *EventHandler_PublishStripEvent_Call) Run(run func(event *model.StripEvent)) *EventHandler_PublishStripEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.StripEvent))
	})
	return _c
}

func (_c *EventHandler_PublishStripEvent_Call) Return(_a0 error) *EventHandler_PublishStripEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewEventHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventHandler creates a new instance of EventHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventHandler(t mockConstructorTestingTNewEventHandler) *EventHandler {
	mock := &EventHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
