// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DBHandler is an autogenerated mock type for the DBHandler type
type DBHandler struct {
	mock.Mock
}

type DBHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *DBHandler) EXPECT() *DBHandler_Expecter {
	return &DBHandler_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *DBHandler) Close() {
	_m.Called()
}

// DBHandler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DBHandler_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DBHandler_Expecter) Close() *DBHandler_Close_Call {
	return &DBHandler_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DBHandler_Close_Call) Run(run func()) *DBHandler_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DBHandler_Close_Call) Return() *DBHandler_Close_Call {
	_c.Call.Return()
	return _c
}

// Create provides a mock function with given fields: input
func (_m *DBHandler) Create(input interface{}) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type DBHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - input interface{}
func (_e *DBHandler_Expecter) Create(input interface{}) *DBHandler_Create_Call {
	return &DBHandler_Create_Call{Call: _e.mock.On("Create", input)}
}

func (_c *DBHandler_Create_Call) Run(run func(input interface{})) *DBHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *DBHandler_Create_Call) Return(err error) *DBHandler_Create_Call {
	_c.Call.Return(err)
	return _c
}

// Delete provides a mock function with given fields: input
func (_m *DBHandler) Delete(input interface{}) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DBHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - input interface{}
func (_e *DBHandler_Expecter) Delete(input interface{}) *DBHandler_Delete_Call {
	return &DBHandler_Delete_Call{Call: _e.mock.On("Delete", input)}
}

func (_c *DBHandler_Delete_Call) Run(run func(input interface{})) *DBHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *DBHandler_Delete_Call) Return(err error) *DBHandler_Delete_Call {
	_c.Call.Return(err)
	return _c
}

// Get provides a mock function with given fields: id, obj
func (_m *DBHandler) Get(id string, obj interface{}) error {
	ret := _m.Called(id, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(id, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBHandler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DBHandler_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - id string
//  - obj interface{}
func (_e *DBHandler_Expecter) Get(id interface{}, obj interface{}) *DBHandler_Get_Call {
	return &DBHandler_Get_Call{Call: _e.mock.On("Get", id, obj)}
}

func (_c *DBHandler_Get_Call) Run(run func(id string, obj interface{})) *DBHandler_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *DBHandler_Get_Call) Return(_a0 error) *DBHandler_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAll provides a mock function with given fields: dest
func (_m *DBHandler) GetAll(dest interface{}) error {
	ret := _m.Called(dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBHandler_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type DBHandler_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//  - dest interface{}
func (_e *DBHandler_Expecter) GetAll(dest interface{}) *DBHandler_GetAll_Call {
	return &DBHandler_GetAll_Call{Call: _e.mock.On("GetAll", dest)}
}

func (_c *DBHandler_GetAll_Call) Run(run func(dest interface{})) *DBHandler_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *DBHandler_GetAll_Call) Return(_a0 error) *DBHandler_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

// Save provides a mock function with given fields: input
func (_m *DBHandler) Save(input interface{}) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBHandler_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type DBHandler_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - input interface{}
func (_e *DBHandler_Expecter) Save(input interface{}) *DBHandler_Save_Call {
	return &DBHandler_Save_Call{Call: _e.mock.On("Save", input)}
}

func (_c *DBHandler_Save_Call) Run(run func(input interface{})) *DBHandler_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *DBHandler_Save_Call) Return(err error) *DBHandler_Save_Call {
	_c.Call.Return(err)
	return _c
}

// Update provides a mock function with given fields: dbObject, input
func (_m *DBHandler) Update(dbObject interface{}, input interface{}) error {
	ret := _m.Called(dbObject, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(dbObject, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type DBHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - dbObject interface{}
//  - input interface{}
func (_e *DBHandler_Expecter) Update(dbObject interface{}, input interface{}) *DBHandler_Update_Call {
	return &DBHandler_Update_Call{Call: _e.mock.On("Update", dbObject, input)}
}

func (_c *DBHandler_Update_Call) Run(run func(dbObject interface{}, input interface{})) *DBHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *DBHandler_Update_Call) Return(err error) *DBHandler_Update_Call {
	_c.Call.Return(err)
	return _c
}
