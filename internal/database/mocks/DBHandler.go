// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DBHandler is an autogenerated mock type for the DBHandler type
type DBHandler[T interface{}] struct {
	mock.Mock
}

type DBHandler_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *DBHandler[T]) EXPECT() *DBHandler_Expecter[T] {
	return &DBHandler_Expecter[T]{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *DBHandler[T]) Close() {
	_m.Called()
}

// DBHandler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DBHandler_Close_Call[T interface{}] struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DBHandler_Expecter[T]) Close() *DBHandler_Close_Call[T] {
	return &DBHandler_Close_Call[T]{Call: _e.mock.On("Close")}
}

func (_c *DBHandler_Close_Call[T]) Run(run func()) *DBHandler_Close_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DBHandler_Close_Call[T]) Return() *DBHandler_Close_Call[T] {
	_c.Call.Return()
	return _c
}

// Create provides a mock function with given fields: input
func (_m *DBHandler[T]) Create(input *T) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(*T) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type DBHandler_Create_Call[T interface{}] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - input *T
func (_e *DBHandler_Expecter[T]) Create(input interface{}) *DBHandler_Create_Call[T] {
	return &DBHandler_Create_Call[T]{Call: _e.mock.On("Create", input)}
}

func (_c *DBHandler_Create_Call[T]) Run(run func(input *T)) *DBHandler_Create_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T))
	})
	return _c
}

func (_c *DBHandler_Create_Call[T]) Return(err error) *DBHandler_Create_Call[T] {
	_c.Call.Return(err)
	return _c
}

// Delete provides a mock function with given fields: input
func (_m *DBHandler[T]) Delete(input *T) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(*T) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DBHandler_Delete_Call[T interface{}] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - input *T
func (_e *DBHandler_Expecter[T]) Delete(input interface{}) *DBHandler_Delete_Call[T] {
	return &DBHandler_Delete_Call[T]{Call: _e.mock.On("Delete", input)}
}

func (_c *DBHandler_Delete_Call[T]) Run(run func(input *T)) *DBHandler_Delete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T))
	})
	return _c
}

func (_c *DBHandler_Delete_Call[T]) Return(err error) *DBHandler_Delete_Call[T] {
	_c.Call.Return(err)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *DBHandler[T]) Get(id string) (*T, error) {
	ret := _m.Called(id)

	var r0 *T
	if rf, ok := ret.Get(0).(func(string) *T); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBHandler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DBHandler_Get_Call[T interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *DBHandler_Expecter[T]) Get(id interface{}) *DBHandler_Get_Call[T] {
	return &DBHandler_Get_Call[T]{Call: _e.mock.On("Get", id)}
}

func (_c *DBHandler_Get_Call[T]) Run(run func(id string)) *DBHandler_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DBHandler_Get_Call[T]) Return(_a0 *T, _a1 error) *DBHandler_Get_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *DBHandler[T]) GetAll() ([]T, error) {
	ret := _m.Called()

	var r0 []T
	if rf, ok := ret.Get(0).(func() []T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBHandler_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type DBHandler_GetAll_Call[T interface{}] struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *DBHandler_Expecter[T]) GetAll() *DBHandler_GetAll_Call[T] {
	return &DBHandler_GetAll_Call[T]{Call: _e.mock.On("GetAll")}
}

func (_c *DBHandler_GetAll_Call[T]) Run(run func()) *DBHandler_GetAll_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DBHandler_GetAll_Call[T]) Return(_a0 []T, _a1 error) *DBHandler_GetAll_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Save provides a mock function with given fields: input
func (_m *DBHandler[T]) Save(input *T) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(*T) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBHandler_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type DBHandler_Save_Call[T interface{}] struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - input *T
func (_e *DBHandler_Expecter[T]) Save(input interface{}) *DBHandler_Save_Call[T] {
	return &DBHandler_Save_Call[T]{Call: _e.mock.On("Save", input)}
}

func (_c *DBHandler_Save_Call[T]) Run(run func(input *T)) *DBHandler_Save_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T))
	})
	return _c
}

func (_c *DBHandler_Save_Call[T]) Return(err error) *DBHandler_Save_Call[T] {
	_c.Call.Return(err)
	return _c
}

// Update provides a mock function with given fields: dbObject, input
func (_m *DBHandler[T]) Update(dbObject T, input T) error {
	ret := _m.Called(dbObject, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(T, T) error); ok {
		r0 = rf(dbObject, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type DBHandler_Update_Call[T interface{}] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - dbObject T
//   - input T
func (_e *DBHandler_Expecter[T]) Update(dbObject interface{}, input interface{}) *DBHandler_Update_Call[T] {
	return &DBHandler_Update_Call[T]{Call: _e.mock.On("Update", dbObject, input)}
}

func (_c *DBHandler_Update_Call[T]) Run(run func(dbObject T, input T)) *DBHandler_Update_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T), args[1].(T))
	})
	return _c
}

func (_c *DBHandler_Update_Call[T]) Return(err error) *DBHandler_Update_Call[T] {
	_c.Call.Return(err)
	return _c
}

type mockConstructorTestingTNewDBHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBHandler creates a new instance of DBHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBHandler[T interface{}](t mockConstructorTestingTNewDBHandler) *DBHandler[T] {
	mock := &DBHandler[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
