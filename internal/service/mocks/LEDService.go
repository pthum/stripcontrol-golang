// Code generated by mockery v2.36.0. DO NOT EDIT.

package servicemocks

import (
	model "github.com/pthum/stripcontrol-golang/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// LEDService is an autogenerated mock type for the LEDService type
type LEDService struct {
	mock.Mock
}

type LEDService_Expecter struct {
	mock *mock.Mock
}

func (_m *LEDService) EXPECT() *LEDService_Expecter {
	return &LEDService_Expecter{mock: &_m.Mock}
}

// CreateLEDStrip provides a mock function with given fields: mdl
func (_m *LEDService) CreateLEDStrip(mdl *model.LedStrip) error {
	ret := _m.Called(mdl)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.LedStrip) error); ok {
		r0 = rf(mdl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LEDService_CreateLEDStrip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLEDStrip'
type LEDService_CreateLEDStrip_Call struct {
	*mock.Call
}

// CreateLEDStrip is a helper method to define mock.On call
//   - mdl *model.LedStrip
func (_e *LEDService_Expecter) CreateLEDStrip(mdl interface{}) *LEDService_CreateLEDStrip_Call {
	return &LEDService_CreateLEDStrip_Call{Call: _e.mock.On("CreateLEDStrip", mdl)}
}

func (_c *LEDService_CreateLEDStrip_Call) Run(run func(mdl *model.LedStrip)) *LEDService_CreateLEDStrip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.LedStrip))
	})
	return _c
}

func (_c *LEDService_CreateLEDStrip_Call) Return(_a0 error) *LEDService_CreateLEDStrip_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LEDService_CreateLEDStrip_Call) RunAndReturn(run func(*model.LedStrip) error) *LEDService_CreateLEDStrip_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLEDStrip provides a mock function with given fields: id
func (_m *LEDService) DeleteLEDStrip(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LEDService_DeleteLEDStrip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLEDStrip'
type LEDService_DeleteLEDStrip_Call struct {
	*mock.Call
}

// DeleteLEDStrip is a helper method to define mock.On call
//   - id string
func (_e *LEDService_Expecter) DeleteLEDStrip(id interface{}) *LEDService_DeleteLEDStrip_Call {
	return &LEDService_DeleteLEDStrip_Call{Call: _e.mock.On("DeleteLEDStrip", id)}
}

func (_c *LEDService_DeleteLEDStrip_Call) Run(run func(id string)) *LEDService_DeleteLEDStrip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LEDService_DeleteLEDStrip_Call) Return(_a0 error) *LEDService_DeleteLEDStrip_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LEDService_DeleteLEDStrip_Call) RunAndReturn(run func(string) error) *LEDService_DeleteLEDStrip_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *LEDService) GetAll() ([]model.LedStrip, error) {
	ret := _m.Called()

	var r0 []model.LedStrip
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.LedStrip, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.LedStrip); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LedStrip)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LEDService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type LEDService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *LEDService_Expecter) GetAll() *LEDService_GetAll_Call {
	return &LEDService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *LEDService_GetAll_Call) Run(run func()) *LEDService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LEDService_GetAll_Call) Return(_a0 []model.LedStrip, _a1 error) *LEDService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LEDService_GetAll_Call) RunAndReturn(run func() ([]model.LedStrip, error)) *LEDService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetLEDStrip provides a mock function with given fields: id
func (_m *LEDService) GetLEDStrip(id string) (*model.LedStrip, error) {
	ret := _m.Called(id)

	var r0 *model.LedStrip
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.LedStrip, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.LedStrip); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LedStrip)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LEDService_GetLEDStrip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLEDStrip'
type LEDService_GetLEDStrip_Call struct {
	*mock.Call
}

// GetLEDStrip is a helper method to define mock.On call
//   - id string
func (_e *LEDService_Expecter) GetLEDStrip(id interface{}) *LEDService_GetLEDStrip_Call {
	return &LEDService_GetLEDStrip_Call{Call: _e.mock.On("GetLEDStrip", id)}
}

func (_c *LEDService_GetLEDStrip_Call) Run(run func(id string)) *LEDService_GetLEDStrip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LEDService_GetLEDStrip_Call) Return(_a0 *model.LedStrip, _a1 error) *LEDService_GetLEDStrip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LEDService_GetLEDStrip_Call) RunAndReturn(run func(string) (*model.LedStrip, error)) *LEDService_GetLEDStrip_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfileForStrip provides a mock function with given fields: id
func (_m *LEDService) GetProfileForStrip(id string) (*model.ColorProfile, error) {
	ret := _m.Called(id)

	var r0 *model.ColorProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ColorProfile, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ColorProfile); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ColorProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LEDService_GetProfileForStrip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfileForStrip'
type LEDService_GetProfileForStrip_Call struct {
	*mock.Call
}

// GetProfileForStrip is a helper method to define mock.On call
//   - id string
func (_e *LEDService_Expecter) GetProfileForStrip(id interface{}) *LEDService_GetProfileForStrip_Call {
	return &LEDService_GetProfileForStrip_Call{Call: _e.mock.On("GetProfileForStrip", id)}
}

func (_c *LEDService_GetProfileForStrip_Call) Run(run func(id string)) *LEDService_GetProfileForStrip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LEDService_GetProfileForStrip_Call) Return(_a0 *model.ColorProfile, _a1 error) *LEDService_GetProfileForStrip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LEDService_GetProfileForStrip_Call) RunAndReturn(run func(string) (*model.ColorProfile, error)) *LEDService_GetProfileForStrip_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProfileForStrip provides a mock function with given fields: id
func (_m *LEDService) RemoveProfileForStrip(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LEDService_RemoveProfileForStrip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProfileForStrip'
type LEDService_RemoveProfileForStrip_Call struct {
	*mock.Call
}

// RemoveProfileForStrip is a helper method to define mock.On call
//   - id string
func (_e *LEDService_Expecter) RemoveProfileForStrip(id interface{}) *LEDService_RemoveProfileForStrip_Call {
	return &LEDService_RemoveProfileForStrip_Call{Call: _e.mock.On("RemoveProfileForStrip", id)}
}

func (_c *LEDService_RemoveProfileForStrip_Call) Run(run func(id string)) *LEDService_RemoveProfileForStrip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LEDService_RemoveProfileForStrip_Call) Return(_a0 error) *LEDService_RemoveProfileForStrip_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LEDService_RemoveProfileForStrip_Call) RunAndReturn(run func(string) error) *LEDService_RemoveProfileForStrip_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLEDStrip provides a mock function with given fields: id, updMdl
func (_m *LEDService) UpdateLEDStrip(id string, updMdl model.LedStrip) error {
	ret := _m.Called(id, updMdl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.LedStrip) error); ok {
		r0 = rf(id, updMdl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LEDService_UpdateLEDStrip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLEDStrip'
type LEDService_UpdateLEDStrip_Call struct {
	*mock.Call
}

// UpdateLEDStrip is a helper method to define mock.On call
//   - id string
//   - updMdl model.LedStrip
func (_e *LEDService_Expecter) UpdateLEDStrip(id interface{}, updMdl interface{}) *LEDService_UpdateLEDStrip_Call {
	return &LEDService_UpdateLEDStrip_Call{Call: _e.mock.On("UpdateLEDStrip", id, updMdl)}
}

func (_c *LEDService_UpdateLEDStrip_Call) Run(run func(id string, updMdl model.LedStrip)) *LEDService_UpdateLEDStrip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.LedStrip))
	})
	return _c
}

func (_c *LEDService_UpdateLEDStrip_Call) Return(_a0 error) *LEDService_UpdateLEDStrip_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LEDService_UpdateLEDStrip_Call) RunAndReturn(run func(string, model.LedStrip) error) *LEDService_UpdateLEDStrip_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfileForStrip provides a mock function with given fields: id, updProf
func (_m *LEDService) UpdateProfileForStrip(id string, updProf model.ColorProfile) (*model.ColorProfile, error) {
	ret := _m.Called(id, updProf)

	var r0 *model.ColorProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.ColorProfile) (*model.ColorProfile, error)); ok {
		return rf(id, updProf)
	}
	if rf, ok := ret.Get(0).(func(string, model.ColorProfile) *model.ColorProfile); ok {
		r0 = rf(id, updProf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ColorProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(string, model.ColorProfile) error); ok {
		r1 = rf(id, updProf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LEDService_UpdateProfileForStrip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfileForStrip'
type LEDService_UpdateProfileForStrip_Call struct {
	*mock.Call
}

// UpdateProfileForStrip is a helper method to define mock.On call
//   - id string
//   - updProf model.ColorProfile
func (_e *LEDService_Expecter) UpdateProfileForStrip(id interface{}, updProf interface{}) *LEDService_UpdateProfileForStrip_Call {
	return &LEDService_UpdateProfileForStrip_Call{Call: _e.mock.On("UpdateProfileForStrip", id, updProf)}
}

func (_c *LEDService_UpdateProfileForStrip_Call) Run(run func(id string, updProf model.ColorProfile)) *LEDService_UpdateProfileForStrip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.ColorProfile))
	})
	return _c
}

func (_c *LEDService_UpdateProfileForStrip_Call) Return(_a0 *model.ColorProfile, _a1 error) *LEDService_UpdateProfileForStrip_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LEDService_UpdateProfileForStrip_Call) RunAndReturn(run func(string, model.ColorProfile) (*model.ColorProfile, error)) *LEDService_UpdateProfileForStrip_Call {
	_c.Call.Return(run)
	return _c
}

// NewLEDService creates a new instance of LEDService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLEDService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LEDService {
	mock := &LEDService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
