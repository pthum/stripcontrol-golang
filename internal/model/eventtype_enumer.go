// Code generated by "enumer -type=EventType -json -text -transform=upper"; DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _EventTypeName = "UNKNOWNSAVEDELETE"

var _EventTypeIndex = [...]uint8{0, 7, 11, 17}

const _EventTypeLowerName = "unknownsavedelete"

func (i EventType) String() string {
	if i < 0 || i >= EventType(len(_EventTypeIndex)-1) {
		return fmt.Sprintf("EventType(%d)", i)
	}
	return _EventTypeName[_EventTypeIndex[i]:_EventTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EventTypeNoOp() {
	var x [1]struct{}
	_ = x[Unknown-(0)]
	_ = x[Save-(1)]
	_ = x[Delete-(2)]
}

var _EventTypeValues = []EventType{Unknown, Save, Delete}

var _EventTypeNameToValueMap = map[string]EventType{
	_EventTypeName[0:7]:        Unknown,
	_EventTypeLowerName[0:7]:   Unknown,
	_EventTypeName[7:11]:       Save,
	_EventTypeLowerName[7:11]:  Save,
	_EventTypeName[11:17]:      Delete,
	_EventTypeLowerName[11:17]: Delete,
}

var _EventTypeNames = []string{
	_EventTypeName[0:7],
	_EventTypeName[7:11],
	_EventTypeName[11:17],
}

// EventTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EventTypeString(s string) (EventType, error) {
	if val, ok := _EventTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EventTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EventType values", s)
}

// EventTypeValues returns all values of the enum
func EventTypeValues() []EventType {
	return _EventTypeValues
}

// EventTypeStrings returns a slice of all String values of the enum
func EventTypeStrings() []string {
	strs := make([]string, len(_EventTypeNames))
	copy(strs, _EventTypeNames)
	return strs
}

// IsAEventType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EventType) IsAEventType() bool {
	for _, v := range _EventTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for EventType
func (i EventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventType
func (i *EventType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EventType should be a string, got %s", data)
	}

	var err error
	*i, err = EventTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for EventType
func (i EventType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for EventType
func (i *EventType) UnmarshalText(text []byte) error {
	var err error
	*i, err = EventTypeString(string(text))
	return err
}
